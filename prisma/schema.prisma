// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------User Info------------------

model User {
  id Int @id @default(autoincrement()) @unique
  email String @unique
  password String
  posts Post[]
  profile_id Int @unique
  profile UserProfile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  comments Comments[]
  liked_posts LikedPosts[]
}

model UserProfile{
  id Int @id @default(autoincrement()) @unique
  user User?
  avatar String
  username String @unique
  reports Int @default(0)
}

// ------------------------------------------

model Post {
  id Int @id @default(autoincrement()) @unique
  title String
  body String?
  author_id Int
  author User @relation(fields: [author_id], references: [id])
  created_at DateTime @default(now())
  comments Comments[]
  likes Int @default(1)
  views Int @default(1)
  reports Int @default(0)
  liked_post LikedPosts[]
}

model LikedPosts {
  id Int @id @default(autoincrement()) @unique
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  post_id Int
  post Post @relation(fields: [post_id], references: [id])
}

model Comments {
  id Int @id @default(autoincrement()) @unique
  body String
  author_id Int
  author User @relation(fields: [author_id], references: [id])
  post_id Int
  post Post @relation(fields: [post_id], references: [id])
  reports Int @default(0)
  likes Int @default(0)
  created_at DateTime @default(now())
}